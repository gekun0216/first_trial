git clone

# start to track the untracked file.
# stage the changes, multiple-times.
git add

git status

# -s short output
git status -s
git status --short

# ? modified means modify something already in snapshot.
# ? new means newly added to staging area. 

# without no arg, diff the changes what you've made in the working dir but not
# staged yet.
git diff

# diff between staged and last commit.
git diff --staged

# diff what we've staged so far.
git diff --cached

# empty commit message means abortion
git commit

# make automated commit message more specific by adding info provided by 
# git diff
git commit -v

# inline commit message
git commit -m

# staging modification before commit
git commit -a

# replace the previous commit
git commit --amend

# rm from staging and also working dir, and then commit will rm from snapshot.
git rm

# Only rm from staging, to make the file untracked
git rm --cached

# equavalent to: mv file1 file2; git rm file1; git add file2;
git mv

git log

# -p (patches?), -2, show the latest two commits. 
git log -p -2

# abbreviated stats for each commit
git log --stat

# options can be oneline | short | full | fuller | format
git log --pretty=options

# Show branch and merge history
git log --pretty=oneline --graph

# limited options
git log --since | --until | --author | --grep | -S

# manage remote project
git remote

# verbose version
git remove -v

git remote add <short name> <url>

git remote show [remote_name]

# Just change the remote's short name
git remote rename [old_remote_name] [new_remote_name]

# dissociate?
git remote rm [remote_name]

git fetch [remote_short_name]

git pull

git push [remote_name] [branch_name]

git tag

git tag -l<pattern>

# create a lightweight tag
git tag <tag_name> [commit_sha]

# create a annotated tag
git tag -a <tag_name> -m <tag_description> [commit_sha]

# delete tag 
git tag -d <tag_name>

git checkout -b <branch_name> [tagname]

git push origin <tag_name>

git push origin --tags
